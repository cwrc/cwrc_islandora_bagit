<?php

/**
 * @file
 * For the CWRC Islandora BagIt module.
 */

define('CWRC_ISLANDORA_BAGIT_MAX_CHILDREN', 100);
// 2147483648 = 2GB.
define('CWRC_ISLANDORA_BAGIT_MAX_COLLECTION_SIZE', 2147483648);

module_load_include('inc', 'cwrc_islandora_bagit', 'cwrc_islandora_bagit.theme');

/**
 * Implements hook_element_info().
 */
function cwrc_islandora_bagit_element_info() {
  $types = array(
    'io_checkbox_tree' => array(
      '#input' => TRUE,
      '#process' => array('cwrc_islandora_bagit_process_checkbox_tree'),
      '#theme' => array('io_checkbox_tree'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'io_checkbox_tree_level' => array(
      '#input' => FALSE,
      '#theme' => array('io_checkbox_tree_level'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'io_checkbox_tree_item' => array(
      '#input' => FALSE,
      '#theme' => array('io_checkbox_tree_item'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'io_checkbox_tree_label' => array(
      '#input' => FALSE,
      '#theme' => array('io_checkbox_tree_label'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
  );

  return $types;
}

/**
 * Implements hook_theme().
 */
function cwrc_islandora_bagit_theme($existing, $type, $theme, $path) {
  return array(
    'io_checkbox_tree' => array(
      'render element' => 'element',
    ),
    'io_checkbox_tree_level' => array(
      'render element' => 'element',
    ),
    'io_checkbox_tree_item' => array(
      'render element' => 'element',
    ),
    'io_checkbox_tree_label' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function cwrc_islandora_bagit_menu_alter(&$items) {
  if (!empty($items['islandora/object/%islandora_object/manage/bagit'])) {
    $bagit = &$items['islandora/object/%islandora_object/manage/bagit'];
    $bagit['page callback'] = 'drupal_get_form';
    $bagit['page arguments'] = array('cwrc_islandora_bagit_create_bag_form', 2);
    $bagit['file'] = 'cwrc_islandora_bagit.form.inc';
    $bagit['file path'] = drupal_get_path('module', 'cwrc_islandora_bagit');
  }
}

/**
 * Gets an object hierarchy.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The islandora object.
 * @param array $allowed
 *   Allowed objects.
 * @param string $filter
 *   ID of an object to filter.
 * @param string $label
 *   The label.
 * @param array $default
 *   The default.
 * @param bool $initial
 *   Whether it's the initial object in the tree.
 * @param array $processed
 *   Processed items.
 *
 * @return array
 *   The tree hierarchy.
 */
function cwrc_islandora_bagit_get_object_hierarchy($islandora_object, &$allowed, $filter, $label, $default = array(), $initial = FALSE, $processed = array(), $depth = 0, $offset = 0) {
  $depth++;
  if (empty($islandora_object->COLLECTION_MEMBERS)) {
    $members = _cwrc_islandora_bagit_get_object_children($islandora_object);
    $islandora_object->COLLECTION_MEMBERS = $members;
    $islandora_object->COLLECTION_MEMBERS_COUNT = count($members);
    $islandora_object->COLLECTION_MEMBERS_OFFSET = 0;
    $use_offset = FALSE;
    $result = array();
  }
  else {
    $members = $islandora_object->COLLECTION_MEMBERS;
    if (!$offset) {
      $islandora_object->COLLECTION_MEMBERS_OFFSET++;
    }
    $use_offset = TRUE;
    $result = $islandora_object->children;
  }
  $id = $islandora_object->id;
  $islandora_object->DEPTH = $depth;

  if (!$use_offset) {
    if ($islandora_object->COLLECTION_MEMBERS_COUNT <= CWRC_ISLANDORA_BAGIT_MAX_CHILDREN && !in_array($id, $processed)) {
      array_push($processed, $id);
      if ($filter !== '') {
        foreach ($allowed as $k => $v) {
          if (array_key_exists($k, $members)) {
            $member = &$members[$k];
            if ($member) {
              $children = [];
              $is_collection_policy = _cwrc_islandora_bagit_object_is_collection_policy($member);
              $is_paged_content = !$is_collection_policy ? _cwrc_islandora_bagit_object_is_paged_content($member) : FALSE;
              if ($is_collection_policy || $is_paged_content) {
                $children = cwrc_islandora_bagit_get_object_hierarchy($member, $allowed, $filter, $label, $default, FALSE, $processed);
              }
              if (is_array($children)) {
                $member->children = $children;
                $member->children_selected = _cwrc_islandora_bagit_object_children_selected($member, $default);
              }
              else {
                $member->children_selected = FALSE;
              }
              $member->TEST = $label;
              $member->parent = $islandora_object;
              $result[$member->id] = $member;
            }
          }
        }
      }
      else {
        foreach ($members as $member) {
          if ($filter === '' || array_key_exists($member->id, $allowed)) {
            $children = array();
            $is_collection_policy = _cwrc_islandora_bagit_object_is_collection_policy($member);
            $is_paged_content = !$is_collection_policy ? _cwrc_islandora_bagit_object_is_paged_content($member) : FALSE;
            if ($is_collection_policy || $is_paged_content) {
              $children = cwrc_islandora_bagit_get_object_hierarchy($member, $allowed, $filter, $label, $default, FALSE, $processed, $depth);
            }
            if (is_array($children)) {
              $member->children = $children;
              $member->children_selected = _cwrc_islandora_bagit_object_children_selected($member, $default);
            }
            else {
              $member->children_selected = FALSE;
            }
            $member->TEST = $label;
            $member->parent = $islandora_object;
            $result[$member->id] = $member;
          }
        }
      }
      $islandora_object->COLLECTION_MEMBERS_COUNT_PROCESSED = count($members);
      $islandora_object->children = $members;
      $islandora_object->children_selected = _cwrc_islandora_bagit_object_children_selected($islandora_object, $default);
    }
    elseif ($islandora_object->COLLECTION_MEMBERS_COUNT > CWRC_ISLANDORA_BAGIT_MAX_CHILDREN && !in_array($id, $processed)) {
      array_push($processed, $id);
      $member_ids = array_slice($members, 0, CWRC_ISLANDORA_BAGIT_MAX_CHILDREN);
      $islandora_object->COLLECTION_MEMBERS_COUNT_PROCESSED = count($member_ids);
      $processed_members = array();

      foreach ($member_ids as $member_id) {
        if (($member = islandora_object_load($member_id)) && ($filter === '' || array_key_exists($member_id, $allowed))) {
          $children = array();
          $is_collection_policy = _cwrc_islandora_bagit_object_is_collection_policy($member);
          $is_paged_content = !$is_collection_policy ? _cwrc_islandora_bagit_object_is_paged_content($member) : FALSE;
          if ($is_collection_policy || $is_paged_content) {
            $children = cwrc_islandora_bagit_get_object_hierarchy($member, $allowed, $filter, $label, $default, FALSE, $processed);
          }
          if (is_array($children)) {
            $member->children = $children;
            $member->children_selected = _cwrc_islandora_bagit_object_children_selected($member, $default);
          }
          else {
            $member->children_selected = FALSE;
          }
          $member->TEST = $label;
          $member->parent = $islandora_object;
          $processed_members[$member->id] = $member;
          $result[$member_id] = $member;
        }
      }
      $islandora_object->children = !empty($islandora_object->children) ? $islandora_object->children : array();
      if (!$islandora_object->children) {
        $islandora_object->children = $processed_members;
      }
      else {
        $islandora_object->children = array_merge($islandora_object->children, $processed_members);
      }
      $islandora_object->children_selected = _cwrc_islandora_bagit_object_children_selected($islandora_object, $default);
    }
    else {
      $islandora_object->children = [];
      $islandora_object->children_selected = FALSE;
    }
  }
  else {
    $collection_offset = $islandora_object->COLLECTION_MEMBERS_OFFSET;
    $array_offset = $offset ?: $collection_offset;
    $array_offset *= CWRC_ISLANDORA_BAGIT_MAX_CHILDREN;
    // Getting next 100 by offsetting from the one we had before with load more.
    $member_ids = array_slice($members, $array_offset, CWRC_ISLANDORA_BAGIT_MAX_CHILDREN);
    $islandora_object->COLLECTION_MEMBERS_COUNT_PROCESSED += count($member_ids);
    foreach ($member_ids as $member_id) {
      if ($member = islandora_object_load($member_id)) {
        $children = array();
        $is_collection_policy = _cwrc_islandora_bagit_object_is_collection_policy($member);
        $is_paged_content = !$is_collection_policy ? _cwrc_islandora_bagit_object_is_paged_content($member) : FALSE;
        if ($is_collection_policy || $is_paged_content) {
          $children = cwrc_islandora_bagit_get_object_hierarchy($member, $allowed, '', '', $default, FALSE, $processed);
        }
        if (is_array($children)) {
          $member->children = $children;
          $member->children_selected = _cwrc_islandora_bagit_object_children_selected($member, $default);
        }
        else {
          $member->children_selected = FALSE;
        }
        $member->TEST = '';
        $member->parent = $islandora_object;
        $islandora_object->children[$member_id] = $member;
      }
    }
    $islandora_object->children_selected = _cwrc_islandora_bagit_object_children_selected($islandora_object, $default);
    $result = $islandora_object->children;
  }
  return $result;
}

/**
 * Determine if children members have selected object as default.
 *
 * @param array $object_members
 *   Object members.
 * @param array $default
 *   Default object members selected.
 *
 * @return bool
 *   TRUE if any, false otherwise.
 */
function _cwrc_islandora_bagit_object_children_selected($object_members, $default) {
  if (!empty($object_members->children)) {
    foreach ($object_members->children as $member) {
      if (isset($default[$member->id]) || $member->children_selected) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Gets children of an Islandora object.
 *
 * @param \IslandoraFedoraObject $object
 *   The object.
 *
 * @return array
 *   It's children.
 */
function _cwrc_islandora_bagit_get_object_children($object) {
  module_load_include('inc', 'islandora_plotit', 'includes/voyant_helpers');
  $ri_result = NULL;
  _cwrc_islandora_bagit_get_members_via_ri($object, $ri_result);

  $objects = array();
  if (!empty($ri_result)) {
    if (count($ri_result) <= CWRC_ISLANDORA_BAGIT_MAX_CHILDREN) {
      foreach ($ri_result as $result) {
        if (!empty($result['object']['type']) && $result['object']['type'] === 'pid') {
          $pid = $result['object']['value'];
          $objects[$pid] = islandora_object_load($pid);
        }
      }
    }
    else {
      $objects = array_map(function ($ri_result) {
        return $ri_result['object']['value'];
      }, $ri_result);
    }
  }
  elseif (_cwrc_islandora_bagit_object_is_paged_content($object)) {
    $ri_result = _cwrc_islandora_bagit_paged_content_get_pages_ri($object);
    if (count($ri_result) <= CWRC_ISLANDORA_BAGIT_MAX_CHILDREN) {
      foreach ($ri_result as $result) {
        if (!empty($result['pid'])) {
          $pid = $result['pid'];
          $objects[$pid] = islandora_object_load($pid);
        }
      }
    }
    else {
      $objects = array_map(function ($ri_result) {
        return $ri_result['pid'];
      }, $ri_result);
    }
  }
  return $objects;
}

/**
 * Converts a list of member objects to a key/value list of options.
 *
 * @param array $members
 *   Members Objects.
 *
 * @return array
 *   A key/value array of member objects (id => label)
 */
function _cwrc_islandora_bagit_get_options(array $members) {
  $options = array();

  if (is_array($members) && count($members) > 0) {
    foreach ($members as $member) {
      $options[$member->id] = $member->label;
      $options += _cwrc_islandora_bagit_get_options($member->children);
    }
  }
  return $options;
}

/**
 * Gets the object datastreams human readable and raw size.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The islandora object.
 *
 * @return array
 *   The object raw and human readable sizes.
 */
function _cwrc_islandora_bagit_get_object_datastreams_human_readable_size($islandora_object) {
  $size = 0;
  module_load_include('inc', 'islandora', 'includes/utilities');
  foreach ($islandora_object as $ds) {
    if (is_object($ds) && ($ds->controlGroup === 'M' || $ds->controlGroup === 'X')) {
      $size += $ds->size;
    }
  }

  if ($size) {
    $size_arr = array(
      'human' => islandora_convert_bytes_to_human_readable($size),
      'raw' => $size,
    );
  }
  else {
    $size_arr = array(
      'human' => 'n/a',
      'raw' => 0,
    );
  }
  return $size_arr;
}

/**
 * Recursively go through the option tree and return a flat array of options.
 */
function _cwrc_islandora_bagit_tree_flatten($element, &$form_state) {
  $output = array();
  $children = element_children($element);
  foreach ($children as $c) {
    $child = $element[$c];
    if (array_key_exists('#type', $child) && ($child['#type'] == 'radio' || $child['#type'] == 'checkbox')) {
      $output[] = $child;
    }
    else {
      $output = array_merge($output, _cwrc_islandora_bagit_tree_flatten($child, $form_state));
    }
  }
  return $output;
}

/**
 * Creates a set of Bags, one per child object, via the Drupal Batch API.
 *
 * @param array $objects_to_include
 *   The objects to include.
 * @param \IslandoraFedoraObject $collection
 *   The collection.
 */
function cwrc_islandora_bagit_create_object_bag_batch($objects_to_include, $collection) {
  $num_objects = count($objects_to_include);
  $operations = array();

  // Add each object in the collection to the $operations array.
  foreach ($objects_to_include as $object) {
    $operations[] = array(
      'cwrc_islandora_bagit_process_object_batch',
      array($object, $num_objects),
    );
  }

  $batch = array(
    'operations' => $operations,
    'title' => t('Creating Bags'),
    'init_message' => t('Initializing'),
    'error_message' => t('An error occurred'),
    'finished' => 'islandora_bagit_object_batch_finished',
  );
  batch_set($batch);
  batch_process('islandora/object/' . $collection->id);
}

/**
 * Process one object in the batch.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The object.
 * @param int $num_objects
 *   The number of objects in this batch.
 * @param array $context
 *   The Batch API $context array.
 */
function cwrc_islandora_bagit_process_object_batch($islandora_object, $num_objects, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = $num_objects;
    $context['results'][] = $islandora_object->id;
    $context['message'] = t('Creating Bag for object @pid', array('@pid' => $islandora_object->label));
  }
  islandora_bagit_create_bag($islandora_object);
}

/**
 * Creates a single Bag containing all objects in a collection.
 *
 * @param array $objects_to_include
 *   The objects to include.
 * @param \IslandoraFedoraObject $collection
 *   The collection.
 */
function cwrc_islandora_bagit_create_collection_bag_batch($objects_to_include, $collection) {
  // Sanitize the PID so it is usable in file paths.
  $pid = str_replace(array(':', '-'), '_', $collection->id);

  // Save all the datastreams to a randomly named temporary directory so
  // they can be added to the Bag. We delete these files after creating the Bag.
  $random_string = substr(md5(mt_rand()), 0, 7);
  $tmp_ds_directory = variable_get('islandora_bagit_bag_tmp_dir', file_directory_temp()) .
    '/islandora_bagit_tmp/' . $random_string;
  if (!file_exists($tmp_ds_directory)) {
    if (!mkdir($tmp_ds_directory, 0777, TRUE) && !is_dir($tmp_ds_directory)) {
      drupal_set_message(
        t('Directory "@dir" was not created', array('@dir' => $tmp_ds_directory)),
        'warning'
      );
    }
  }

  // Load the BagItPHP library.
  $bagit_library_dir = variable_get('islandora_bagit_library_dir', 'BagItPHP');
  if ($bagit_library_path = libraries_get_path($bagit_library_dir)) {
    require_once $bagit_library_path . '/lib/bagit.php';
  }

  $bag_file_name = variable_get('islandora_bagit_bag_name', 'Bag-') . $pid;
  $bag_output_path = variable_get('islandora_bagit_bag_output_dir', '/tmp') .
    DIRECTORY_SEPARATOR . $bag_file_name;

  if (file_exists($bag_output_path)) {
    rrmdir($bag_output_path);
  }

  $_SESSION['islandora_bagit_all_added_files'] = array();

  if (variable_get('islandora_bagit_payload_octetstream_sum', FALSE)) {
    // Variables to hold the number of files in the batch bag and their
    // summed size.
    $_SESSION['islandora_bagit_batch_octetstream_sum_count'] = '0';
    $_SESSION['islandora_bagit_batch_octetstream_sum_size'] = '0';
  }

  $num_objects = count($objects_to_include);
  $operations = array();

  $collection_plugins = variable_get('islandora_bagit_collection_plugins', array(''));
  $object_plugins = variable_get('islandora_bagit_object_plugins', array(''));

  // Get bag-info.txt metadata.
  $bag_info = islandora_bagit_create_baginfo();

  // Create a new bag.
  $bag = new BagIt($bag_output_path, TRUE, TRUE, FALSE, $bag_info);
  islandora_bagit_serialize_bag_object($bag, $pid, $tmp_ds_directory);
  // We need the $pid in islandora_bagit_collection_batch_finish_bag().
  $_SESSION['islandora_bagit_collection_object_pid'] = $pid;

  // Iterate through all the objects and create an entry in $operations
  // for each one.
  foreach ($objects_to_include as $islandora_object) {
    if (count($collection_plugins) && count($object_plugins)) {
      $operations[] = array(
        'cwrc_islandora_bagit_process_collection_batch',
        array($islandora_object, $num_objects, $tmp_ds_directory),
      );
    }
    else {
      drupal_set_message(t('There are no files to add to the Bag.'), 'warning');
      watchdog('bagit', 'BagIt Bag not created for !object: plugins found no files.',
        array('!object' => $collection->id));
      return;
    }
  }

  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'title' => t('Creating Bag'),
      'init_message' => t('Initializing'),
      'error_message' => t('An error occurred'),
      'finished' => 'islandora_bagit_collection_batch_finished',
    );

    // It would be awesome if we could use $batch['progressive'] = FALSE
    // but that is pointless (see https://drupal.org/node/638712).
    batch_set($batch);

    // batch_process() is required if the batch is not initiated within a form
    // handler. Parameter is the URL to redirect the user to, in this case, do
    // not redirect.
    batch_process('islandora/object/' . $collection->id);
  }
}

/**
 * Process one object in the collection batch.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The current object.
 * @param string $num_objects
 *   The number of objects in this batch.
 * @param array $context
 *   The Batch API $context array.
 */
function cwrc_islandora_bagit_process_collection_batch($islandora_object, $num_objects, $tmp_ds_directory, &$context) {
  // Load the BagItPHP library to avoid 'incomplete object' errors.
  $bagit_library_dir = variable_get('islandora_bagit_library_dir', 'BagItPHP');
  if ($bagit_library_path = libraries_get_path($bagit_library_dir)) {
    require_once $bagit_library_path . '/lib/bagit.php';
  }

  $bag = islandora_bagit_unserialize_bag_object();

  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = $num_objects;
    $context['results'][] = $islandora_object->id;
    $context['message'] = t('Adding object @pid to Bag', array('@pid' => $islandora_object->label));
  }

  // Iterate through all the object plugins. Each plugin must return the
  // parameters required for addFile() (i.e., a list of file source and
  // destination paths) or FALSE if it doesn't want to create a file.
  $collection_plugin = variable_get('islandora_bagit_collection_plugin', '');
  $object_plugins = variable_get('islandora_bagit_object_plugins', array(''));
  // Since $bag->addFile() is being called after we loop through all the object
  // plugins, we need an array where we can accumulate the returned arrays from
  // each plugin.
  $all_files_to_add = array();
  foreach ($object_plugins as $object_plugin => $enabled) {
    $files_to_add = array();
    if ($enabled) {
      module_load_include('inc', 'islandora_bagit', 'plugins/' . $object_plugin);
      $object_plugin_init_function = 'islandora_bagit_' . $object_plugin . '_init';
      // Process the object plugins.
      $files_to_add = $object_plugin_init_function($islandora_object, $tmp_ds_directory);
    }
    if (count($files_to_add)) {
      foreach ($files_to_add as $file_to_add) {
        if (!in_array($file_to_add, $all_files_to_add)) {
          $all_files_to_add[] = $file_to_add;
        }
      }
    }
  }

  if (count($all_files_to_add)) {
    // Pass $all_files_to_add from the object plugins to the collection plugin.
    module_load_include('inc', 'islandora_bagit', 'plugins/' . $collection_plugin);
    $collection_plugin_init_function = 'islandora_bagit_' . $collection_plugin . '_init';
    $all_files_to_add = $collection_plugin_init_function($islandora_object, $all_files_to_add, $tmp_ds_directory);

    // Now that the collection plugin has been fired, update the Bag.
    $all_added_files = $_SESSION['islandora_bagit_all_added_files'];
    foreach ($all_files_to_add as $file) {
      $bag->addFile($file['source'], $file['dest']);
      $all_added_files[] = $file['dest'];

      // Update the octetstream values for this batch Bag.
      if (variable_get('islandora_bagit_payload_octetstream_sum', FALSE)) {
        $_SESSION['islandora_bagit_batch_octetstream_sum_count']++;
        $_SESSION['islandora_bagit_batch_octetstream_sum_size'] += filesize($file['source']);
      }
    }
    $bag->update();
    $_SESSION['islandora_bagit_all_added_files'] = array_unique($all_added_files);

    // Serialize the Bag object for later use.
    islandora_bagit_serialize_bag_object($bag, $islandora_object->id, $tmp_ds_directory);
  }
}

/**
 * Checks whether an object is paged content.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The object.
 *
 * @return bool
 *   TRUE when paged content, FALSE otherwise.
 */
function _cwrc_islandora_bagit_object_is_paged_content($islandora_object) {
  $is_paged_content = FALSE;
  $module = module_exists('islandora_paged_content');
  if ($module) {
    $models = !empty($islandora_object->models) ? $islandora_object->models : array();
    $is_paged_content = in_array('islandora:bookCModel', $models, TRUE);
  }
  return $is_paged_content;
}

/**
 * Checks whether an object is a collection policy.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The object.
 *
 * @return bool
 *   TRUE when object has collection policy datastream , FALSE otherwise.
 */
function _cwrc_islandora_bagit_object_is_collection_policy($islandora_object) {
  $is_collection_policy = FALSE;
  foreach ($islandora_object as $ds) {
    if ($ds->id === 'COLLECTION_POLICY') {
      $is_collection_policy = TRUE;
      break;
    }
  }
  return $is_collection_policy;
}

/**
 * Helper function to retrieve the pages and dimensions from the RI.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a book.
 *
 * @return array
 *   All the pages in the given paged content object. Ordered by sequence
 *   number. Each an array containing info.
 */
function _cwrc_islandora_bagit_paged_content_get_pages_ri(AbstractObject $object) {
  $query = <<<EOQ
  PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
  SELECT ?pid ?page ?label ?width ?height
  FROM <#ri>
  WHERE {
    ?pid <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}> ;
         <fedora-model:label> ?label ;
         islandora-rels-ext:isSequenceNumber ?page ;
         <fedora-model:state> <fedora-model:Active> .
    OPTIONAL {
      ?pid <fedora-view:disseminates> ?dss .
      ?dss <fedora-view:disseminationType> <info:fedora/*/JP2> ;
           islandora-rels-ext:width ?width ;
           islandora-rels-ext:height ?height .
   }
  }
  ORDER BY ?label
EOQ;

  $results = $object->repository->ri->sparqlQuery($query);

  // Get rid of the "extra" info...
  $map = function($o) {
    foreach ($o as $key => &$info) {
      $info = $info['value'];
    }

    $o = array_filter($o);

    return $o;
  };
  $pages = array_map($map, $results);

  // Grab the PIDs...
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pids = array_map($get_pid, $pages);

  // If we have some pages, combine our remapped results to produce an array
  // mapping pids to the values for that pid.
  $pages = count($pids) ? array_combine($pids, $pages) : array();
  return $pages;
}

/**
 * Helper function to get object members using ri query.
 *
 * @param \IslandoraFedoraObject $islandora_object
 *   The object.
 * @param array $members
 *   The members storage.
 */
function _cwrc_islandora_bagit_get_members_via_ri($islandora_object, &$members) {

  $tuque = islandora_get_tuque_connection();

  // Query the rindex to get all the objects that have a 'isMemberOfCollection'
  // relationship with the specified collection and add all their PIDs to the
  // list.
  $ri_query = <<<EOQ
PREFIX fedora-rels-ext: <info:fedora/fedora-system:def/relations-external#>
SELECT ?object ?label
FROM <#ri>
WHERE {
  ?object fedora-rels-ext:isMemberOfCollection <info:fedora/{$islandora_object->id}> ;
          <fedora-model:label> ?label ;
}
ORDER BY ?label
EOQ;

  $members = $tuque->repository->ri->sparqlQuery($ri_query, 'unlimited');
}

/**
 * Gets the Islandora object tree element prefix.
 *
 * @param \IslandoraFedoraObject $object
 *   The object.
 *
 * @return string
 *   The element prefix.
 */
function _cwrc_islandora_bagit_get_object_tree_element_prefix(\IslandoraFedoraObject $object) {
  $members_count = $object->COLLECTION_MEMBERS_COUNT;
  $processed_members_count = !empty($object->COLLECTION_MEMBERS_COUNT_PROCESSED) ? $object->COLLECTION_MEMBERS_COUNT_PROCESSED : 0;
  $element_prefix = '<div id="cwrc-islandora-bagit-tree-checkboxes">';
  if ($members_count !== $processed_members_count && $processed_members_count === 100) {
    $element_prefix .= t('<div class="form-intro clearfix"><i class="fa fa-exclamation-triangle warning" aria-hidden="true"></i><p>
You have chosen to create a download from <a href="/islandora/object/@id">@label</a>, 
containing over 100 descendants. Due to the size of the collection, only 
the first 100 direct descendants are selected. If you want to modify the 
selection, uncheck some of the items and check others. You will need to go 
to any sub-collections to download them. The current selection contains: 
<span class="tree-size"></span>
</p></div>', array('@id' => $object->id, '@label' => $object->label));
  }
  else {
    $element_prefix .= t('<div class="form-intro clearfix"><p>
You have chosen to create a download from <a href="/islandora/object/@id">@label</a>.
The current selection contains:  <span class="tree-size"></span>.
</p></div>',
      array(
        '@id' => $object->id,
        '@label' => $object->label,
      )
    );
  }

  return $element_prefix;
}
